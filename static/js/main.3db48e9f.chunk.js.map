{"version":3,"sources":["logo.svg","components/HandCalculator.js","components/PokerView.js","App.js","reportWebVitals.js","index.js"],"names":["straightFinder","ray","array","i","length","thirteen","highestToLowest","push","splice","indexOf","Math","max","pop","weightedPayload","kickerCalculator","newPairFinder","map","val","sort","reverse","count","console","log","pairEvaluator","scores","filter","num","bigTwo","highCard","kicker","pow","number","input","shift","j","summer","handEvaluator","hand","slice","clubsHeartsSpadesDiamonds","payout","straightFlush","min","payload","flushFinder","thisarray","winsOrLoses","a","b","PokerView","props","table","builder","state","tableCards","Col","Card","CardImg","src","dealt","leftHand","handA","rightHand","handB","handsPlayed","leftWins","rightWins","ties","deck","Array","fill","value","index","handAValue","handBValue","showDebug","setState","dealHand","times","cards","swap","floor","random","shuffleDeck","className","Button","onClick","this","Container","fluid","Row","toString","href","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3db48e9f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/*\r\n * ()=>{\r\n\t\t\t\t\t\tfakeArray = array.filter((num)=>{return num != array[i]%13});\r\n\t\t\t\t\t\t\tlet secondPair = pairFinder(fakeArray);\r\n\t\t\t\t\t\t\tif(secondPair <2000) return false;\r\n\t\t\t\t\t\t\telse if(secondPair >= 2000 && secondPair <3000){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn 5000 + array[i]%13 + secondPair - 2000;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(secondPair >array[i]%13+3000) return secondPair + array[i]%13 + 5000;\r\n\t\t\t\t\t\t\telse if(secondPair > 4000) return secondPair;\r\n\t\t\t\t\t\t\t}\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//takes seven card input and returns hand strength\r\n//a stronger hand should always return a greater hand strength than a weaker hand\r\n\r\n//input format:\r\n\r\nfunction flushFinder (input) {\r\n\tlet ray = input.slice();\r\n\tconsole.log(ray);\r\n\tlet clubsHeartsSpadesDiamonds = [[],[],[],[]];\r\n\tlet count = [0,0,0,0,];\r\n\tfor(let i = 0; i<ray.length;i++){\r\n\t\t\r\n\t\tif(ray[i]<=13){\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[0].push(ray[i]);\r\n\t\t\tcount[0]++;\r\n\t\t}\r\n\t\telse if (ray[i]>13&&ray[i]<=26){\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[1].push(ray[i]);\r\n\t\t\tcount[1]++;\r\n\t\t}\r\n\t\telse if (ray[i]>26&&ray[i]<=39){\r\n\t\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[2].push(ray[i]);\r\n\t\t\tcount[2]++;\r\n\t\r\n\t\t}\r\n\t\telse if (ray[i]>39&&ray[i]<=52){\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[3].push(ray[i]);\r\n\t\t\tcount[3]++;\r\n\t\t\t\r\n\t\t}\r\n\t\telse console.log(\"couldn't catch  \" + ray[i]);\r\n\t}\r\n\t\r\n\tlet payout = count.indexOf(Math.max(...count));\r\n\t//console.log(count[0]);\r\n\t//console.log(Math.max(...count));\r\n\t//console.log(\"payout array:\" + clubsHeartsSpadesDiamonds[payout]);\r\n\tif(count[payout]>=5) { //there's a flush\r\n\t\r\n\t\t\tlet straightFlush = straightFinder(clubsHeartsSpadesDiamonds[payout]);//remember these are raw inputs\r\n\t\t\tif(straightFlush){\r\n\t\t\t\t\r\n\t\t\t\treturn straightFlush * 2; //should be +7000 since straight = 3500\r\n\t\t\t\t//aces are still low in a straight flush, so regular straightFinder should work\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\twhile(clubsHeartsSpadesDiamonds[payout].length>5){\r\n\t\t\t\t\t\r\n\t\t\t\t\tclubsHeartsSpadesDiamonds[payout].splice(clubsHeartsSpadesDiamonds[payout].indexOf(Math.min(clubsHeartsSpadesDiamonds[payout])), 1);\r\n\t\t\t\t}\r\n\t\t\t\treturn 4000 + (()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet payload = 0;\r\n\t\t\t\t\tfor(let i in clubsHeartsSpadesDiamonds[payout]){\r\n\t\t\t\t\t\tpayload += kickerCalculator(clubsHeartsSpadesDiamonds[payout][i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn payload;\r\n\t\t\t\t\t\r\n\t\t\t\t\t})()\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t}\r\n\telse return false;\r\n}\r\n\r\n//returns the highest possible straight from given array\r\nfunction straightFinder(ray) {\r\n\t\r\n\tlet array = [...ray];\r\n\t//populate array with normalized input\r\n\tfor(let i = 0; i<array.length; i++){\r\n\r\n\t\t\r\n\t\tarray[i] = thirteen(array[i]);\r\n\r\n\t\tif(array[i]==13){array[array.length] = 0;}//ace is both low and high\r\n\t\t\r\n\t\t\r\n\t}\r\n//console.log(\"debug: array =\" + array);\r\n\t\r\n\tlet highestToLowest = [];\r\n//console.log(\"debug: mathmax array = \" + array.splice(array.indexOf(Math.max(...array)),1));\r\n\t\r\n\thighestToLowest.push(array.splice(array.indexOf(Math.max(...array)),1));\r\n//console.log(highestToLowest[0]);\r\n\twhile(array.length>0&&highestToLowest.length<5){\r\n\t\t\r\n\t\thighestToLowest.push(array.splice(array.indexOf(Math.max(...array)),1));\r\n\r\n\t\t//console.log(highestToLowest[1]);\r\n\t\t\r\n\t\t\r\n\t\tif(highestToLowest[highestToLowest.length-1] != (highestToLowest[highestToLowest.length - 2] -1)){\r\n//console.log(\"debug true\" + Number(highestToLowest[highestToLowest.length-1] + 1 ) + \"\" + highestToLowest[highestToLowest.length - 2]);\r\n\t\t\t\r\n\t\t\tif(highestToLowest[highestToLowest.length-1] == highestToLowest[highestToLowest.length - 2]){ //it's because of a repeat\r\n\t\t\t\t\r\n\t\t\t\thighestToLowest.pop();//deletes repeats instead of resetting array\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\telse { \r\n\t\t\t\t\r\n\r\n\r\n\t\t\t\t\thighestToLowest = [highestToLowest[highestToLowest.length-1]];//reset array\r\n\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\t}\r\n//console.log(\"debug: highestToLowest = \" + highestToLowest);\r\n\tif(highestToLowest.length==5){\r\n//console.log(\"true\");\r\n\t\t\r\n\t\t//return highestToLowest.reduce(((total,value)=>{total += kickerCalculator(value)}),0) + 3500; //gives nan for some reason\r\n\t\tlet weightedPayload = 0;\r\n\tfor (let i = 0; i<highestToLowest.length; i++){\r\n\t\tweightedPayload += kickerCalculator(highestToLowest[i]);\r\n}\r\n\treturn weightedPayload + 3500;\r\n\r\n\t}\r\n\telse return false;\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n\t\r\n}\r\n//1. check for royal flush\r\n//2. check for flush\r\n//3. check for straight\r\n// returns Ms + top card % 13\r\n\r\n//4. check for pair/trip/quads\r\n\r\n//returns Mp,Mt,Mq + top 3, 2, 1\r\n\r\n//pairfinder\r\n\r\nfunction newPairFinder (ray) {\r\n\r\n\tlet array = ray.map(val => thirteen(val)).sort().reverse();\r\n\tlet count = 0;\r\n\tlet max = 0;\r\n\tfor(let i = 0; i<array.length; i++){\r\n\r\n\t\tif(i<array.length) {\r\n\r\n\t\t\tif(array[i]===array[i+1]){\r\n\t\t\t\tcount++;\r\n\t\t\t\tmax = array[i];\r\n\t\t\t} else if (count>0) {\r\n\t\t\t\ti = array.length;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tconsole.log(count);\r\n\r\n\r\n\tswitch(count) {\r\n\r\n\t\tcase 1: \r\n\t\t\treturn max + 2000;\r\n\t\tcase 2: \r\n\t\t\treturn max + 3000;\r\n\t\tcase 3: \r\n\t\t\treturn max + 6000;\r\n\t\tdefault:\r\n\t\t\treturn false;\r\n\r\n\t}\r\n\r\n\tconsole.log(array + \"is false??\");\r\n\r\n\treturn false;\r\n\r\n\r\n\t\r\n/*\r\n\tfor(let i = array.length-1; i>0; i--){\r\n\t\tif(array[i]===array[i-1]){\r\n\t\t\tcount++;\r\n\r\n\t\t} else if(count>0){\r\n\r\n\t\t\tswitch(count) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn array[i]+2000;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn array[i]+3000;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn array[i]+6000;\r\n\t\t\t\tdefault: return false;\r\n\t\t\t}\r\n\r\n\t\t} else console.log(array[i] + \" != \" + array[i-1])\r\n\t\t\r\n\t}*/\r\n\r\n\t\r\n\t//pairevaluator is expecting an unordered list of pairs\r\n\t//we can just greedily return the first found pair\r\n\r\n\r\n}\r\n\r\nfunction pairFinder (ray) {\r\n\t\r\n\tlet array = [...ray]; //we mutate this\r\n\t\r\n\tfor (let i = 0; i<array.length;i++){\r\n\t\t\r\n\t\tfor(let j = i +1; j<array.length; j++){\r\n\t\t\t\r\n\t\t\tif(thirteen(array[i]) == thirteen(array[j])){\r\n\t\t\t\t\r\n\t\t\t\treturn ((()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(j; j<array.length; j++){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(thirteen(array[i])==thirteen(array[j])){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn ((()=>{for(j;j<array.length;j++){if(thirteen(array[i])==thirteen(array[j])){\r\n\t\t\t\t\t\t\t\t//only higher quads beat\r\n\t\t\t\t\t\t\t\treturn thirteen(array[i]) + 6000 /*kickerCalculator(Math.max(array.filter((num)=>{thirteen(num)!=thirteen(array[i])})))*/;//quads\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} return false;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t})() || thirteen(array[i]) + 3000) //trips\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;//no trips\r\n\t\t\t\t\t\r\n\t\t\t\t\t})() || thirteen(array[i]) + 2000)//will either return the number of the pair or false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n//second step is to filter the remaining cards, then run pairFinder on them again, until no cards remain or it returns less than a pair.\r\n\r\nfunction pairEvaluator (ray) {\r\n\t\r\n\tlet scores = [];\r\n\tlet array = [...ray];\r\n\t\r\n\t\r\n\tscores[0] = newPairFinder(array) || 0;\r\n\t\r\n\tif(scores[0]>0){ //pairfinder returned a pair\r\n\t\t\t//console.log(array);\r\n\t\tarray = array.filter(num=>thirteen(num)!=scores[0]%1000);\r\n\t\t\t//console.log(array);\r\n\t\t\tscores[1] = newPairFinder(array) || 0;\r\n\r\n\t\t\tif(scores[1]>0){\r\n\t\t\t\t\tarray = array.filter(num=>thirteen(num)!=scores[1]%1000);\r\n\t\t\t\t\tscores[2] = newPairFinder(array) || 0;\r\n\t\t\t}//there's only 3 possible pairs in any set of 7 cards, 2 = 3\r\n\t}\r\n\telse return false;\r\n\t\r\n\tlet max = Math.max(...scores);\r\n\t\r\n\tif(max>6000) {\r\n\t\tconsole.log(\"over 6k\");\r\n\t\treturn max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator(Math.max(...ray.filter(val=>thirteen(val!=thirteen(max%1000))).map(val=>thirteen(val))));//probably quads\r\n\t\t//return max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator(Math.max(array.filter((num)=>{return thirteen(num)!=thirteen(max%6000)})));\r\n\t}\r\n\telse if(max>3000){\r\n\t\t\r\n\t\tconsole.log(scores);\r\n\t\tscores = scores.filter(num=>num!=max);\r\n\t\treturn ((Math.max(...scores)>0) ? \r\n\t\t\tmax - max%1000 + kickerCalculator((max%1000)+13) * 3 \r\n\t\t\t+ Math.max(...scores) - Math.max(...scores)%1000 + kickerCalculator((Math.max(...scores)%1000)+13) * 2 -1000\r\n\t\t\t: max - max%1000 + kickerCalculator((max%1000)+13)+ (()=>{\r\n\t\t\t\tarray = [...ray].filter((num)=>{return thirteen(num)!=max%1000}).map(val=>thirteen(val));\r\n\t\t\t\tlet bigTwo = 0;\r\n\t\t\t\tfor(let i = 0; i<2; i++){\r\n\t\t\t\t\tbigTwo += kickerCalculator(Math.max(...array));\r\n\t\t\t\t\tarray = array.filter(val=>val!=Math.max(...array));\r\n\t\t\t\t}\r\n\t\t\t\treturn bigTwo;\r\n\t\t\t})())//creates a + 5000 hand with highest pair or adds the top 2 kickers\r\n\t\t\r\n\t}\r\n\telse if(max>2000){\r\n\t\tscores = scores.filter((num)=>{return num!=max});\t\r\n\t\treturn ((Math.max(...scores)>0) ? \r\n\t\tmax - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator((Math.max(...scores)%1000)+13) + Math.max(...scores) - 1500 - Math.max(...scores)%1000\r\n\t\t+ kickerCalculator(Math.max(\r\n\t\t\t...ray.map(val=>thirteen(val)).filter(val=>val!=max%1000 && val!=Math.max(...scores)%1000)\r\n\t\t\t\r\n\t\t\t//.filter(val=>val!=max%1000 && val!=Math.max(...scores)%1000)\r\n\t\t))\r\n\t\t: max -max%1000 + kickerCalculator((max%1000)+13) + highCard(ray)\r\n\t\t\r\n\t\t)//2p evaluates to 2500 + remainder or + 3 kickers\r\n\t\r\n\t}\r\n\t\r\n\telse {\r\n\t\tconsole.log(\"error no pair but still got here\");\r\n\t\treturn false}\r\n\t\r\n\t\r\n}\r\n//needs a raw kicker\r\nfunction kickerCalculator (kicker) {\r\n//for math reasons, powers of 7 are enough to ensure top kicker wins over summed lower cards\r\n\treturn ((thirteen(kicker))*Math.pow(7,thirteen(kicker)/3))/3000000;\r\n\t\r\n\t\r\n\t\r\n\t}\r\n\t//fixes 13%13 = 0 problem\r\nfunction thirteen (number) {\r\n\tif (number == 0) return 0;\r\n\r\n\tif (number % 13 == 0 ) return 13;\r\n\telse return number%13;\r\n\t\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n//5. return sum of top 5 cards\r\n\r\n//this simple method loops twice to remove two lowest cards and returns the sum of the remaining card values\r\n\r\n\r\nfunction highCard (input){\r\n\r\n\tlet array = [...input];\r\n\r\n{\r\n/*\r\nfor(let i = array.length-1; i>0; i--){\r\n\r\n\r\nif(array[i]<array[i-1]){\r\n\r\n[array[i]][array[i-1]] = [array[i-1]][array[i]];\r\n}\r\n\r\n}\r\n\r\narray.shift(); //removes the lowest*/\r\n/*\r\nwhile(array.length>5){\r\n\tlet minIndex = array.indexOf(Math.min(...array));\r\n\t\r\n\tif(array[0]!=array[minIndex]){\r\n\t\t//swap\r\n\t\t[array[0]][array[minIndex]] = [array[minIndex]][array[0]];\r\n\t}\r\n\telse array.shift();\r\n\t\r\n\t\r\n}*/ \r\n\r\n}\r\n\tarray = array.map(val=>thirteen(val)).sort();\r\n\tarray.shift(); array.shift();\r\n\r\n\r\n\r\n\r\n//scope for j\r\n\t{let j = 0;\r\n\t\tlet summer = (array) => {\r\n\r\n\t\t\tfor(let i = 0; i<array.length;i++){\r\n\t\t\t\r\n\t\t\t\tj += kickerCalculator(array[i]); \r\n\t\t\t}\r\n\t\t\treturn j;\r\n\t\t}\r\n\t\t\treturn summer(array);\r\n\r\n\t\t}\r\n\t}\r\n\r\n//all the work we did above lets us easily compare by hand value\r\n//every function always returns the highest possible hand by that method\r\nexport function handEvaluator (array){\r\n\t\r\n\tlet hand = [];\r\n\thand[hand.length] = flushFinder(array)||0;\r\n\thand[hand.length] = straightFinder(array)||0;\r\n\thand[hand.length] = pairEvaluator(array)||0;\r\n\thand[hand.length] = highCard(array)||0;\r\n\t//console.log(array);\r\n\t//console.log(Math.max(...hand));\r\n\treturn Math.max(...hand);\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n//console.log(\"Kicker finds: \" + kickerCalculator(6));\r\nconst thisarray = [40,27,35,1,21,34,47];//console.log(\"Highcard = \" + highCard(thisarray));\r\n//second hand\r\nconsole.log(\"handevaluator: \" + handEvaluator(thisarray)); //no longer throwing errors\r\n//console.log(kickerCalculator(thisarray)); //this needs a single int input...\r\n//console.log(pairFinder(thisarray));\r\nconsole.log(pairEvaluator(thisarray));\r\nconsole.log(\"newpairfainder\" + newPairFinder(thisarray));\r\nconsole.log(\"newpairfainder\" + newPairFinder([40,27,35,1]));\r\n//console.log([40,27,35,1].map(a=>thirteen(a)));\r\n//console.log(\"newpairfainder\" + newPairFinder([40,27,35,1].map(a=>thirteen(a))));\r\n//console.log(flushFinder(thisarray));//basically works\r\n//console.log(straightFinder(thisarray)); //fixed\r\n\r\n","//import handEvaluator from './HandCalculator';\r\nimport React, {Component} from 'react';\r\nimport {UncontrolledTooltip, Button, Card, CardImg, Figure, Container, Row, Col} from 'reactstrap';\r\nimport {handEvaluator} from './HandCalculator';\r\nfunction fillDeck () {\r\n\r\n    return new Array(52).fill(0).map((value, index) => index+1);\r\n\r\n}\r\n\r\nfunction winsOrLoses (a,b) {\r\n\r\n    if(a===b) return \"Tied\"\r\n    else return (a>b) ? \"Wins\" : \"Loses\";\r\n\r\n}\r\n\r\nfunction shuffleDeck (times, cards) {\r\n    let deck = [...cards]\r\n    for(let i = 0; i<times; i++){\r\n\r\n        for(let i in deck){\r\n\r\n            let swap = Math.floor(Math.random() * Math.floor(52));\r\n            \r\n            [deck[i],deck[swap]] = [deck[swap], deck[i]];\r\n        }\r\n\r\n    }\r\n\r\n    return deck;\r\n\r\n}\r\n\r\n\r\n\r\nexport default class PokerView extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n            //53 is the face down image\r\n            tableCards: [53,53,53,53,53],\r\n            handA: [53,53],\r\n            handB: [53,53],\r\n            handsPlayed: 0,\r\n            leftWins: 0,\r\n            rightWins: 0,\r\n            ties: 0,\r\n            deck: fillDeck(),\r\n            dealt: false,\r\n            handAValue: 0,\r\n            handBValue: 0\r\n\r\n        }\r\n\r\n        this.showDebug = () => {\r\n            this.setState({\r\n                dealt: !this.state.dealt\r\n            })\r\n        }\r\n\r\n        this.dealHand = () => {\r\n\r\n            let [a,b,table, deck] = [[],[],[], this.state.deck];\r\n\r\n            deck = shuffleDeck(5,deck);\r\n\r\n            //deal to players\r\n            a.push(deck.pop());\r\n            b.push(deck.pop());\r\n            a.push(deck.pop());\r\n            b.push(deck.pop());\r\n            //burn 1\r\n            deck.pop();\r\n            //flop\r\n            table.push(deck.pop());\r\n            table.push(deck.pop());\r\n            table.push(deck.pop());\r\n            //burn 2\r\n            deck.pop();\r\n            //turn card\r\n            table.push(deck.pop());\r\n            //burn 3\r\n            deck.pop();\r\n            //river\r\n            table.push(deck.pop());\r\n            \r\n            console.log([...a, ...table]);\r\n            this.setState({\r\n                //deck: [...deck],\r\n                handA: [...a],\r\n                handB: [...b],\r\n                tableCards: [...table],\r\n                handAValue: handEvaluator([...a, ...table]),\r\n                handBValue: handEvaluator([...b, ...table])\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    table = () => {\r\n\r\n        let builder = [];\r\n\r\n        for(let i in this.state.tableCards){\r\n\r\n            builder.push(\r\n\r\n                <>\r\n                    \r\n                            <Col><Card>\r\n                                <CardImg \r\n                                \r\n                                src={`./images/${this.state.tableCards[i]}.svg`} />\r\n                            </Card><p>{(this.state.dealt) ? this.state.tableCards[i] : \"\"}</p></Col>\r\n                \r\n                </>\r\n                \r\n                    \r\n\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                    {builder}\r\n\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n    \r\n    leftHand = () => {\r\n\r\n        return (\r\n            <>\r\n\r\n            <Card>\r\n                <CardImg src={`./images/${this.state.handA[0]}.svg`} />\r\n            </Card>\r\n            <Card>\r\n                <CardImg src={`./images/${this.state.handA[1]}.svg`} />\r\n            </Card>\r\n            \r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n    rightHand = () => {\r\n\r\n        return (\r\n            <>\r\n\r\n            <Card>\r\n                <CardImg src={`./images/${this.state.handB[0]}.svg`} />\r\n            </Card>\r\n            <Card>\r\n                <CardImg src={`./images/${this.state.handB[1]}.svg`} />\r\n            </Card>\r\n            \r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <h1>Compare two Poker Hands</h1>\r\n\r\n                    <p>Deal two poker hands and then guess which one is the winner.</p>\r\n\r\n                    <Button onClick={this.dealHand}>\r\n                        Shuffle and Deal.\r\n                    </Button>\r\n                    \r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col>\r\n                            <this.leftHand />\r\n                            <p>{(this.state.dealt) ? this.state.handAValue : \"\"}</p>\r\n                            <p>{(this.state.dealt) ? this.state.handA.toString() : \"\"}</p>\r\n                            <p>{winsOrLoses(this.state.handAValue,this.state.handBValue)}</p>\r\n                        </Col>\r\n                        <this.table />\r\n                        <Col>\r\n                            <this.rightHand />\r\n                            <p>{(this.state.dealt) ? this.state.handBValue : \"\"}</p>\r\n                            <p>{(this.state.dealt) ? this.state.handB.toString() : \"\"}</p>\r\n                            <p>{winsOrLoses(this.state.handBValue, this.state.handAValue)}</p>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                    <p>See an error? Please copy the debug info, and file a report on our <a href=\"https://github.com/PrinceOfShapeir/poker-calculator\">Github page.</a></p>\r\n                    <Button onClick={this.showDebug}>\r\n                        Show debug info\r\n                    </Button>\r\n\r\n                </Container>\r\n                \r\n                \r\n                \r\n\r\n\r\n\r\n                </div>\r\n                    \r\n            );\r\n    }\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport PokerView from './components/PokerView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    \n    <PokerView />\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}