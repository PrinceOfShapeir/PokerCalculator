{"version":3,"sources":["logo.svg","components/HandCalculator.js","components/PokerView.js","App.js","reportWebVitals.js","index.js"],"names":["straightFinder","ray","array","map","val","thirteen","sort","a","b","containsZero","i","unshift","console","log","straight","length","highCard","newPairFinder","reverse","count","max","kickerCalculator","kicker","Math","pow","number","input","shift","reduce","acc","handEvaluator","hand","slice","clubsHeartsSpadesDiamonds","push","payout","indexOf","straightFlush","splice","min","payload","flushFinder","scores","filter","num","bigTwo","secondPair","pairEvaluator","thisarray","winsOrLoses","PokerView","props","table","builder","state","tableCards","Col","Card","CardImg","src","dealt","leftHand","handA","rightHand","handB","handsPlayed","leftWins","rightWins","ties","deck","Array","fill","value","index","handAValue","handBValue","showDebug","setState","dealHand","times","cards","swap","floor","random","shuffleDeck","pop","className","Button","onClick","this","Container","fluid","Row","toString","href","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12400e82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/*\r\n * ()=>{\r\n\t\t\t\t\t\tfakeArray = array.filter((num)=>{return num != array[i]%13});\r\n\t\t\t\t\t\t\tlet secondPair = pairFinder(fakeArray);\r\n\t\t\t\t\t\t\tif(secondPair <2000) return false;\r\n\t\t\t\t\t\t\telse if(secondPair >= 2000 && secondPair <3000){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn 5000 + array[i]%13 + secondPair - 2000;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(secondPair >array[i]%13+3000) return secondPair + array[i]%13 + 5000;\r\n\t\t\t\t\t\t\telse if(secondPair > 4000) return secondPair;\r\n\t\t\t\t\t\t\t}\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//takes seven card input and returns hand strength\r\n//a stronger hand should always return a greater hand strength than a weaker hand\r\n\r\n//input format:\r\n\r\nfunction flushFinder (input) {\r\n\tlet ray = input.slice();\r\n\tconsole.log(ray);\r\n\tlet clubsHeartsSpadesDiamonds = [[],[],[],[]];\r\n\tlet count = [0,0,0,0,];\r\n\tfor(let i = 0; i<ray.length;i++){\r\n\t\t\r\n\t\tif(ray[i]<=13){\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[0].push(ray[i]);\r\n\t\t\tcount[0]++;\r\n\t\t}\r\n\t\telse if (ray[i]>13&&ray[i]<=26){\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[1].push(ray[i]);\r\n\t\t\tcount[1]++;\r\n\t\t}\r\n\t\telse if (ray[i]>26&&ray[i]<=39){\r\n\t\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[2].push(ray[i]);\r\n\t\t\tcount[2]++;\r\n\t\r\n\t\t}\r\n\t\telse if (ray[i]>39&&ray[i]<=52){\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[3].push(ray[i]);\r\n\t\t\tcount[3]++;\r\n\t\t\t\r\n\t\t}\r\n\t\telse console.log(\"couldn't catch  \" + ray[i]);\r\n\t}\r\n\t\r\n\tlet payout = count.indexOf(Math.max(...count));\r\n\t//console.log(count[0]);\r\n\t//console.log(Math.max(...count));\r\n\t//console.log(\"payout array:\" + clubsHeartsSpadesDiamonds[payout]);\r\n\tif(count[payout]>=5) { //there's a flush\r\n\t\r\n\t\t\tlet straightFlush = straightFinder(clubsHeartsSpadesDiamonds[payout]);//remember these are raw inputs\r\n\t\t\tif(straightFlush){\r\n\t\t\t\t\r\n\t\t\t\treturn straightFlush * 2; //should be +7000 since straight = 3500\r\n\t\t\t\t//aces are still low in a straight flush, so regular straightFinder should work\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\twhile(clubsHeartsSpadesDiamonds[payout].length>5){\r\n\t\t\t\t\t\r\n\t\t\t\t\tclubsHeartsSpadesDiamonds[payout].splice(clubsHeartsSpadesDiamonds[payout].indexOf(Math.min(clubsHeartsSpadesDiamonds[payout])), 1);\r\n\t\t\t\t}\r\n\t\t\t\treturn 4000 + (()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet payload = 0;\r\n\t\t\t\t\tfor(let i in clubsHeartsSpadesDiamonds[payout]){\r\n\t\t\t\t\t\tpayload += kickerCalculator(clubsHeartsSpadesDiamonds[payout][i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn payload;\r\n\t\t\t\t\t\r\n\t\t\t\t\t})()\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t}\r\n\telse return false;\r\n}\r\nfunction straightFinder(ray) {\r\n\r\n\tlet array = [...ray].map(val=>thirteen(val)).sort((a,b)=>a-b);\r\n\tlet containsZero = false;\r\n\tfor(let i in array){\r\n\t\tif(array[i] === 13) {\r\n\t\t\tcontainsZero = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t} \r\n\tif(containsZero) array.unshift(0);\r\n\tconsole.log(array);\r\n\tlet straight = [array[0]];\r\n\r\n\tfor(let i in array){\r\n\r\n\t\t//if it is not a duplicate\r\n\t\tif(array[i]!==straight[straight.length-1]) {\r\n\t\t\t//if it comes after the last\r\n\t\t\tif(array[i]===straight[straight.length-1]+1){\r\n\t\t\t\tstraight[straight.length] = array[i];\r\n\t\t\t}\r\n\t\t\telse if(array.length-i+1<5) break; //not enough remain\r\n\t\t\telse if(straight.length<5) straight = [array[i]];//reset the straight\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconsole.log(straight);\r\n\r\n\treturn (straight.length>=5) ? 3500 + highCard(straight) : false;\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n//returns the highest possible straight from given array\r\nfunction oldStraightFinder(ray) {\r\n\t\r\n\tlet array = [...ray];\r\n\t//populate array with normalized input\r\n\tfor(let i = 0; i<array.length; i++){\r\n\r\n\t\t\r\n\t\tarray[i] = thirteen(array[i]);\r\n\r\n\t\tif(array[i]==13){array[array.length] = 0;}//ace is both low and high\r\n\t\t\r\n\t\t\r\n\t}\r\n//console.log(\"debug: array =\" + array);\r\n\t\r\n\tlet highestToLowest = [];\r\n//console.log(\"debug: mathmax array = \" + array.splice(array.indexOf(Math.max(...array)),1));\r\n\t\r\n\thighestToLowest.push(array.splice(array.indexOf(Math.max(...array)),1));\r\n//console.log(highestToLowest[0]);\r\n\twhile(array.length>0&&highestToLowest.length<5){\r\n\t\t\r\n\t\thighestToLowest.push(array.splice(array.indexOf(Math.max(...array)),1));\r\n\r\n\t\t//console.log(highestToLowest[1]);\r\n\t\t\r\n\t\t\r\n\t\tif(highestToLowest[highestToLowest.length-1] != (highestToLowest[highestToLowest.length - 2] -1)){\r\n//console.log(\"debug true\" + Number(highestToLowest[highestToLowest.length-1] + 1 ) + \"\" + highestToLowest[highestToLowest.length - 2]);\r\n\t\t\t\r\n\t\t\tif(highestToLowest[highestToLowest.length-1] == highestToLowest[highestToLowest.length - 2]){ //it's because of a repeat\r\n\t\t\t\t\r\n\t\t\t\thighestToLowest.pop();//deletes repeats instead of resetting array\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\telse { \r\n\t\t\t\t\r\n\r\n\r\n\t\t\t\t\thighestToLowest = [highestToLowest[highestToLowest.length-1]];//reset array\r\n\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\t}\r\n//console.log(\"debug: highestToLowest = \" + highestToLowest);\r\n\tif(highestToLowest.length==5){\r\n//console.log(\"true\");\r\n\t\t\r\n\t\t//return highestToLowest.reduce(((total,value)=>{total += kickerCalculator(value)}),0) + 3500; //gives nan for some reason\r\n\t\tlet weightedPayload = 0;\r\n\tfor (let i = 0; i<highestToLowest.length; i++){\r\n\t\tweightedPayload += kickerCalculator(highestToLowest[i]);\r\n}\r\n\treturn weightedPayload + 3500;\r\n\r\n\t}\r\n\telse return false;\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n\t\r\n}\r\n//1. check for royal flush\r\n//2. check for flush\r\n//3. check for straight\r\n// returns Ms + top card % 13\r\n\r\n//4. check for pair/trip/quads\r\n\r\n//returns Mp,Mt,Mq + top 3, 2, 1\r\n\r\n//pairfinder\r\n\r\nfunction newPairFinder (ray) {\r\n\r\n\tlet array = ray.map(val => thirteen(val)).sort().reverse();\r\n\tlet count = 0;\r\n\tlet max = 0;\r\n\tfor(let i = 0; i<array.length; i++){\r\n\r\n\t\tif(i<array.length) {\r\n\r\n\t\t\tif(array[i]===array[i+1]){\r\n\t\t\t\tcount++;\r\n\t\t\t\tmax = array[i];\r\n\t\t\t} else if (count>0) {\r\n\t\t\t\ti = array.length;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tconsole.log(count);\r\n\r\n\r\n\tswitch(count) {\r\n\r\n\t\tcase 1: \r\n\t\t\treturn max + 2000;\r\n\t\tcase 2: \r\n\t\t\treturn max + 3000;\r\n\t\tcase 3: \r\n\t\t\treturn max + 6000;\r\n\t\tdefault:\r\n\t\t\treturn false;\r\n\r\n\t}\r\n\r\n\tconsole.log(array + \"is false??\");\r\n\r\n\treturn false;\r\n\r\n\r\n\t\r\n/*\r\n\tfor(let i = array.length-1; i>0; i--){\r\n\t\tif(array[i]===array[i-1]){\r\n\t\t\tcount++;\r\n\r\n\t\t} else if(count>0){\r\n\r\n\t\t\tswitch(count) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn array[i]+2000;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn array[i]+3000;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn array[i]+6000;\r\n\t\t\t\tdefault: return false;\r\n\t\t\t}\r\n\r\n\t\t} else console.log(array[i] + \" != \" + array[i-1])\r\n\t\t\r\n\t}*/\r\n\r\n\t\r\n\t//pairevaluator is expecting an unordered list of pairs\r\n\t//we can just greedily return the first found pair\r\n\r\n\r\n}\r\n/*\r\nfunction pairFinder (ray) {\r\n\t\r\n\tlet array = [...ray]; //we mutate this\r\n\t\r\n\tfor (let i = 0; i<array.length;i++){\r\n\t\t\r\n\t\tfor(let j = i +1; j<array.length; j++){\r\n\t\t\t\r\n\t\t\tif(thirteen(array[i]) == thirteen(array[j])){\r\n\t\t\t\t\r\n\t\t\t\treturn ((()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(j; j<array.length; j++){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(thirteen(array[i])==thirteen(array[j])){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn ((()=>{for(j;j<array.length;j++){if(thirteen(array[i])==thirteen(array[j])){\r\n\t\t\t\t\t\t\t\t//only higher quads beat\r\n\t\t\t\t\t\t\t\treturn thirteen(array[i]) + 6000 //kickerCalculator(Math.max(array.filter((num)=>{thirteen(num)!=thirteen(array[i])})));//quads\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} return false;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t})() || thirteen(array[i]) + 3000) //trips\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;//no trips\r\n\t\t\t\t\t\r\n\t\t\t\t\t})() || thirteen(array[i]) + 2000)//will either return the number of the pair or false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}*/\r\n\r\n//second step is to filter the remaining cards, then run pairFinder on them again, until no cards remain or it returns less than a pair.\r\n\r\nfunction pairEvaluator (ray) {\r\n\t\r\n\tlet scores = [];\r\n\tlet array = [...ray];\r\n\t\r\n\t\r\n\tscores[0] = newPairFinder(array) || 0;\r\n\t\r\n\tif(scores[0]>0){ //pairfinder returned a pair\r\n\t\t\t//console.log(array);\r\n\t\tarray = array.filter(num=>thirteen(num)!=scores[0]%1000);\r\n\t\t\t//console.log(array);\r\n\t\t\tscores[1] = newPairFinder(array) || 0;\r\n\r\n\t\t\tif(scores[1]>0){\r\n\t\t\t\t\tarray = array.filter(num=>thirteen(num)!=scores[1]%1000);\r\n\t\t\t\t\tscores[2] = newPairFinder(array) || 0;\r\n\t\t\t}//there's only 3 possible pairs in any set of 7 cards, 2 = 3\r\n\t}\r\n\telse return false;\r\n\t\r\n\tlet max = Math.max(...scores);\r\n\t\r\n\tif(max>6000) {\r\n\t\tconsole.log(\"over 6k\");\r\n\t\treturn max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator(Math.max(...ray.filter(val=>thirteen(val!=thirteen(max%1000))).map(val=>thirteen(val))));//probably quads\r\n\t\t//return max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator(Math.max(array.filter((num)=>{return thirteen(num)!=thirteen(max%6000)})));\r\n\t}\r\n\telse if(max>3000){\r\n\t\t\r\n\t\tconsole.log(scores);\r\n\t\tscores = scores.filter(num=>num!=max);\r\n\t\treturn ((Math.max(...scores)>0) ? \r\n\t\t\tmax - max%1000 + kickerCalculator((max%1000)+13) * 3 \r\n\t\t\t+ Math.max(...scores) - Math.max(...scores)%1000 + kickerCalculator((Math.max(...scores)%1000)+13) * 2 -1000\r\n\t\t\t: max - max%1000 + kickerCalculator((max%1000)+13)+ (()=>{\r\n\t\t\t\tarray = [...ray].filter((num)=>{return thirteen(num)!=max%1000}).map(val=>thirteen(val));\r\n\t\t\t\tlet bigTwo = 0;\r\n\t\t\t\tfor(let i = 0; i<2; i++){\r\n\t\t\t\t\tbigTwo += kickerCalculator(Math.max(...array));\r\n\t\t\t\t\tarray = array.filter(val=>val!=Math.max(...array));\r\n\t\t\t\t}\r\n\t\t\t\treturn bigTwo;\r\n\t\t\t})())//creates a + 5000 hand with highest pair or adds the top 2 kickers\r\n\t\t\r\n\t}\r\n\telse if(max>2000){\r\n\t\tscores = scores.filter((num)=>{return num!=max});\t\r\n\t\tlet secondPair = Math.max(...scores) | 0;\r\n\t\treturn ((secondPair>0) ? \r\n\r\n\r\n\t\t\tmax - max%1000 + secondPair - secondPair%1000 - 1500 +\r\n\t\t\t(kickerCalculator(max%1000)) * 49*21 +\r\n\t\t\t(kickerCalculator(secondPair%1000)) *49*28 +\r\n\t\t\t\r\n\t\t\tkickerCalculator(\r\n\t\t\t\tMath.max(\r\n\t\t\t\t\t...[...ray].map(val=>thirteen(val)).filter(val=>val!=max%1000&&val!=secondPair%1000)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\r\n\r\n\t\t/*\r\n\t\tmax - max%1000 + kickerCalculator((max%1000)+13) * 2 + kickerCalculator((Math.max(...scores)%1000)+13) * 2  + Math.max(...scores) - 1500 - Math.max(...scores)%1000\r\n\t\t+ kickerCalculator(Math.max(\r\n\t\t\t...ray.map(val=>thirteen(val)).filter(val=>val!=max%1000 && val!=Math.max(...scores)%1000)\r\n\t\t\t\r\n\t\t\t//.filter(val=>val!=max%1000 && val!=Math.max(...scores)%1000)\r\n\t\t))*/\r\n\t\t: max + highCard(ray) //fix this later\r\n\t\t\t\r\n\t\t\r\n\t\t)//2p evaluates to 2500 + remainder or + 3 kickers\r\n\t\r\n\t}\r\n\t\r\n\telse {\r\n\t\tconsole.log(\"error no pair but still got here\");\r\n\t\treturn false}\r\n\t\r\n\t\r\n}\r\n//needs a raw kicker\r\nfunction kickerCalculator (kicker) {\r\n//for math reasons, powers of 7 are enough to ensure top kicker wins over summed lower cards\r\n\treturn ((thirteen(kicker))*Math.pow(7,thirteen(kicker)/3))/3000000;\r\n\t\r\n\t\r\n\t\r\n\t}\r\n\t//fixes 13%13 = 0 problem\r\nfunction thirteen (number) {\r\n\tif (number == 0) return 0;\r\n\r\n\tif (number % 13 == 0 ) return 13;\r\n\telse return number%13;\r\n\t\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n//5. return sum of top 5 cards\r\n\r\n//this simple method loops twice to remove two lowest cards and returns the sum of the remaining card values\r\n\r\n\r\nfunction highCard (input){\r\n\r\n\t//posible future change: \r\n\t// * add new default param, len = 5\r\n\t\r\n\t\r\n\r\n{\r\n/*\r\nfor(let i = array.length-1; i>0; i--){\r\n\r\n\r\nif(array[i]<array[i-1]){\r\n\r\n[array[i]][array[i-1]] = [array[i-1]][array[i]];\r\n}\r\n\r\n}\r\n\r\narray.shift(); //removes the lowest*/\r\n/*\r\nwhile(array.length>5){\r\n\tlet minIndex = array.indexOf(Math.min(...array));\r\n\t\r\n\tif(array[0]!=array[minIndex]){\r\n\t\t//swap\r\n\t\t[array[0]][array[minIndex]] = [array[minIndex]][array[0]];\r\n\t}\r\n\telse array.shift();\r\n\t\r\n\t\r\n}*/ \r\n\r\n}\r\n\tlet array = [...input].map(val=>thirteen(val)).sort((a,b)=>a-b);\r\n\twhile(array.length>5){\r\n\t\tarray.shift();\r\n\t}\r\n\r\n\treturn array.reduce((acc, val)=>acc+kickerCalculator(val));\r\n}\r\n\r\n\r\n//scope for j\r\n\t/*{let j = 0;\r\n\t\tlet summer = (array) => {\r\n\r\n\t\t\tfor(let i = 0; i<array.length;i++){\r\n\t\t\t\r\n\t\t\t\tj += kickerCalculator(array[i]); \r\n\t\t\t}\r\n\t\t\treturn j;\r\n\t\t}\r\n\t\t\treturn summer(array);\r\n\r\n\t\t}\r\n\t}*/\r\n\r\n//all the work we did above lets us easily compare by hand value\r\n//every function always returns the highest possible hand by that method\r\nexport function handEvaluator (array){\r\n\t\r\n\tlet hand = [];\r\n\thand[hand.length] = flushFinder(array)||0;\r\n\thand[hand.length] = straightFinder(array)||0;\r\n\thand[hand.length] = pairEvaluator(array)||0;\r\n\thand[hand.length] = highCard(array)||0;\r\n\t//console.log(array);\r\n\t//console.log(Math.max(...hand));\r\n\treturn Math.max(...hand);\r\n\t\r\n\t\r\n}\r\n/*\r\nfunction fiveLowest (array) {\r\n\tlet temp = [...array];\r\n\twhile(temp.length>5){\r\n\t\ttemp.shift();\r\n\t}\r\n\treturn temp;\r\n}*/\r\n\r\n//console.log(\"Kicker finds: \" + kickerCalculator(6));\r\nconst thisarray = [8,49,35,11,3,33,21];//console.log(\"Highcard = \" + highCard(thisarray));\r\n//second hand\r\nconsole.log(\"handevaluator: \" + handEvaluator(thisarray));\r\nconsole.log(straightFinder(thisarray));\r\n//console.log(newStraightFinder(thisarray));\r\n//console.log(\"highCard \" + highCard(thisarray));\r\nconsole.log(\"handevaluator: \" + handEvaluator([9,42,35,11,3,33,21])); //no longer throwing errors\r\nconsole.log(straightFinder([9,42,35,11,3,33,21]));\r\n//console.log(\"pairevaluator: \" + pairEvaluator(thisarray));\r\n//console.log(\"pairevaluator: \" + pairEvaluator([45,37,42,7,12,51,3]));\r\n//console.log(\"highCard \" + highCard([21,45,36,38,29,18,26]));\t\r\n\r\nconsole.log(\"winner is \" + (handEvaluator(thisarray)>handEvaluator([45,37,42,7,12,51,3])));\r\n\r\n//console.log(kickerCalculator(7));\r\n//console.log(kickerCalculator(37));\r\n//console.log((kickerCalculator(13)+kickerCalculator(5))-(kickerCalculator(13)+kickerCalculator(3)));\r\n//console.log(\"raw kickers yield: \")\r\n//console.log(thisarray.map(val=>thirteen(val)).sort());\r\n//console.log(fiveLowest(thisarray.map(val=>thirteen(val)).sort()).reduce((acc,val)=>acc+kickerCalculator(val)));\r\n//console.log(fiveLowest(thisarray.map(val=>thirteen(val)).sort()).map(val=>`${val} : ${kickerCalculator(val)}`));\r\n//console.log([37,3,23,48,46,52,13].map(val=>thirteen(val)).sort());\r\n//console.log(fiveLowest([37,3,23,48,46,52,13].map(val=>thirteen(val)).sort()).reduce((acc,val)=>acc+kickerCalculator(val)));\r\n//console.log(fiveLowest([37,3,23,48,46,52,13].map(val=>thirteen(val)).sort()).map(val=>`${val} : ${kickerCalculator(val)}`));\r\n//console.log(kickerCalculator(thisarray)); //this needs a single int input...\r\n\r\n//console.log(pairFinder(thisarray));\r\n//console.log(pairEvaluator(thisarray));\r\n//console.log(\"newpairfainder\" + newPairFinder(thisarray));\r\n//console.log(\"newpairfainder\" + newPairFinder([40,27,35,1]));\r\n//console.log([40,27,35,1].map(a=>thirteen(a)));\r\n//console.log(\"newpairfainder\" + newPairFinder([40,27,35,1].map(a=>thirteen(a))));\r\n//console.log(flushFinder(thisarray));//basically works\r\n//console.log(straightFinder(thisarray)); //fixed\r\n\r\n","//import handEvaluator from './HandCalculator';\r\nimport React, {Component} from 'react';\r\nimport {UncontrolledTooltip, Button, Card, CardImg, Figure, Container, Row, Col} from 'reactstrap';\r\nimport {handEvaluator} from './HandCalculator';\r\nfunction fillDeck () {\r\n\r\n    return new Array(52).fill(0).map((value, index) => index+1);\r\n\r\n}\r\n\r\nfunction winsOrLoses (a,b) {\r\n\r\n    if(a===b) return \"Tied\"\r\n    else return (a>b) ? \"Wins\" : \"Loses\";\r\n\r\n}\r\n\r\nfunction shuffleDeck (times, cards) {\r\n    let deck = [...cards]\r\n    for(let i = 0; i<times; i++){\r\n\r\n        for(let i in deck){\r\n\r\n            let swap = Math.floor(Math.random() * Math.floor(52));\r\n            \r\n            [deck[i],deck[swap]] = [deck[swap], deck[i]];\r\n        }\r\n\r\n    }\r\n\r\n    return deck;\r\n\r\n}\r\n\r\n\r\n\r\nexport default class PokerView extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n            //53 is the face down image\r\n            tableCards: [53,53,53,53,53],\r\n            handA: [53,53],\r\n            handB: [53,53],\r\n            handsPlayed: 0,\r\n            leftWins: 0,\r\n            rightWins: 0,\r\n            ties: 0,\r\n            deck: fillDeck(),\r\n            dealt: false,\r\n            handAValue: 0,\r\n            handBValue: 0\r\n\r\n        }\r\n\r\n        this.showDebug = () => {\r\n            this.setState({\r\n                dealt: !this.state.dealt\r\n            })\r\n        }\r\n\r\n        this.dealHand = () => {\r\n\r\n            let [a,b,table, deck] = [[],[],[], this.state.deck];\r\n\r\n            deck = shuffleDeck(5,deck);\r\n\r\n            //deal to players\r\n            a.push(deck.pop());\r\n            b.push(deck.pop());\r\n            a.push(deck.pop());\r\n            b.push(deck.pop());\r\n            //burn 1\r\n            deck.pop();\r\n            //flop\r\n            table.push(deck.pop());\r\n            table.push(deck.pop());\r\n            table.push(deck.pop());\r\n            //burn 2\r\n            deck.pop();\r\n            //turn card\r\n            table.push(deck.pop());\r\n            //burn 3\r\n            deck.pop();\r\n            //river\r\n            table.push(deck.pop());\r\n            \r\n            console.log([...a, ...table]);\r\n            this.setState({\r\n                //deck: [...deck],\r\n                handA: [...a],\r\n                handB: [...b],\r\n                tableCards: [...table],\r\n                handAValue: handEvaluator([...a, ...table]),\r\n                handBValue: handEvaluator([...b, ...table])\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    table = () => {\r\n\r\n        let builder = [];\r\n\r\n        for(let i in this.state.tableCards){\r\n\r\n            builder.push(\r\n\r\n                <>\r\n                    \r\n                            <Col><Card>\r\n                                <CardImg \r\n                                \r\n                                src={`./images/${this.state.tableCards[i]}.svg`} />\r\n                            </Card><p>{(this.state.dealt) ? this.state.tableCards[i] : \"\"}</p></Col>\r\n                \r\n                </>\r\n                \r\n                    \r\n\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                    {builder}\r\n\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n    \r\n    leftHand = () => {\r\n\r\n        return (\r\n            <>\r\n\r\n            <Card>\r\n                <CardImg src={`./images/${this.state.handA[0]}.svg`} />\r\n            </Card>\r\n            <Card>\r\n                <CardImg src={`./images/${this.state.handA[1]}.svg`} />\r\n            </Card>\r\n            \r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n    rightHand = () => {\r\n\r\n        return (\r\n            <>\r\n\r\n            <Card>\r\n                <CardImg src={`./images/${this.state.handB[0]}.svg`} />\r\n            </Card>\r\n            <Card>\r\n                <CardImg src={`./images/${this.state.handB[1]}.svg`} />\r\n            </Card>\r\n            \r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <h1>Compare two Poker Hands</h1>\r\n\r\n                    <p>Deal two poker hands and then guess which one is the winner.</p>\r\n\r\n                    <Button onClick={this.dealHand}>\r\n                        Shuffle and Deal.\r\n                    </Button>\r\n                    \r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col>\r\n                            <this.leftHand />\r\n                            <p>{(this.state.dealt) ? this.state.handAValue : \"\"}</p>\r\n                            <p>{(this.state.dealt) ? this.state.handA.toString() : \"\"}</p>\r\n                            <p>{winsOrLoses(this.state.handAValue,this.state.handBValue)}</p>\r\n                        </Col>\r\n                        <this.table />\r\n                        <Col>\r\n                            <this.rightHand />\r\n                            <p>{(this.state.dealt) ? this.state.handBValue : \"\"}</p>\r\n                            <p>{(this.state.dealt) ? this.state.handB.toString() : \"\"}</p>\r\n                            <p>{winsOrLoses(this.state.handBValue, this.state.handAValue)}</p>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                    <p>See an error? Please copy the debug info, and file a report on our <a href=\"https://github.com/PrinceOfShapeir/poker-calculator\">Github page.</a></p>\r\n                    <Button onClick={this.showDebug}>\r\n                        Show debug info\r\n                    </Button>\r\n\r\n                </Container>\r\n                \r\n                \r\n                \r\n\r\n\r\n\r\n                </div>\r\n                    \r\n            );\r\n    }\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport PokerView from './components/PokerView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    \n    <PokerView />\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}