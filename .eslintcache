[{"C:\\Users\\Owner\\Desktop\\poker calculator\\poker-calculator\\src\\index.js":"1","C:\\Users\\Owner\\Desktop\\poker calculator\\poker-calculator\\src\\components\\HandCalculator.js":"2","C:\\Users\\Owner\\Desktop\\poker calculator\\poker-calculator\\src\\components\\PokerView.js":"3","C:\\Users\\Owner\\Desktop\\poker calculator\\poker-calculator\\src\\App.js":"4"},{"size":500,"mtime":1609449455432,"results":"5","hashOfConfig":"6"},{"size":10858,"mtime":1612207982236,"results":"7","hashOfConfig":"6"},{"size":5666,"mtime":1612210120583,"results":"8","hashOfConfig":"6"},{"size":226,"mtime":1612048233497,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"pakxsj",{"filePath":"13","messages":"14","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"C:\\Users\\Owner\\Desktop\\poker calculator\\poker-calculator\\src\\index.js",[],["22","23"],"C:\\Users\\Owner\\Desktop\\poker calculator\\poker-calculator\\src\\components\\HandCalculator.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"],"/*\r\n * ()=>{\r\n\t\t\t\t\t\tfakeArray = array.filter((num)=>{return num != array[i]%13});\r\n\t\t\t\t\t\t\tlet secondPair = pairFinder(fakeArray);\r\n\t\t\t\t\t\t\tif(secondPair <2000) return false;\r\n\t\t\t\t\t\t\telse if(secondPair >= 2000 && secondPair <3000){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn 5000 + array[i]%13 + secondPair - 2000;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(secondPair >array[i]%13+3000) return secondPair + array[i]%13 + 5000;\r\n\t\t\t\t\t\t\telse if(secondPair > 4000) return secondPair;\r\n\t\t\t\t\t\t\t}\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//takes seven card input and returns hand strength\r\n//a stronger hand should always return a greater hand strength than a weaker hand\r\n\r\n//input format:\r\n\r\nfunction flushFinder (input) {\r\n\tlet ray = input.slice();\r\n\tconsole.log(ray);\r\n\tlet clubsHeartsSpadesDiamonds = [[],[],[],[]];\r\n\tlet count = [0,0,0,0,];\r\n\tfor(let i = 0; i<ray.length;i++){\r\n\t\t\r\n\t\tif(ray[i]<=13){\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[0].push(ray[i]);\r\n\t\t\tcount[0]++;\r\n\t\t}\r\n\t\telse if (ray[i]>13&&ray[i]<=26){\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[1].push(ray[i]);\r\n\t\t\tcount[1]++;\r\n\t\t}\r\n\t\telse if (ray[i]>26&&ray[i]<=39){\r\n\t\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[2].push(ray[i]);\r\n\t\t\tcount[2]++;\r\n\t\r\n\t\t}\r\n\t\telse if (ray[i]>39&&ray[i]<=52){\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[3].push(ray[i]);\r\n\t\t\tcount[3]++;\r\n\t\t\t\r\n\t\t}\r\n\t\telse console.log(\"couldn't catch  \" + ray[i]);\r\n\t}\r\n\t\r\n\tlet payout = count.indexOf(Math.max(...count));\r\n\t//console.log(count[0]);\r\n\t//console.log(Math.max(...count));\r\n\t//console.log(\"payout array:\" + clubsHeartsSpadesDiamonds[payout]);\r\n\tif(count[payout]>=5) { //there's a flush\r\n\t\r\n\t\t\tlet straightFlush = straightFinder(clubsHeartsSpadesDiamonds[payout]);//remember these are raw inputs\r\n\t\t\tif(straightFlush){\r\n\t\t\t\t\r\n\t\t\t\treturn straightFlush * 2; //should be +7000 since straight = 3500\r\n\t\t\t\t//aces are still low in a straight flush, so regular straightFinder should work\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\twhile(clubsHeartsSpadesDiamonds[payout].length>5){\r\n\t\t\t\t\t\r\n\t\t\t\t\tclubsHeartsSpadesDiamonds[payout].splice(clubsHeartsSpadesDiamonds[payout].indexOf(Math.min(clubsHeartsSpadesDiamonds[payout])), 1);\r\n\t\t\t\t}\r\n\t\t\t\treturn 4000 + (()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet payload = 0;\r\n\t\t\t\t\tfor(let i in clubsHeartsSpadesDiamonds[payout]){\r\n\t\t\t\t\t\tpayload += kickerCalculator(clubsHeartsSpadesDiamonds[payout][i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn payload;\r\n\t\t\t\t\t\r\n\t\t\t\t\t})()\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t}\r\n\telse return false;\r\n}\r\n\r\n//returns the highest possible straight from given array\r\nfunction straightFinder(ray) {\r\n\t\r\n\tlet array = [...ray];\r\n\t//populate array with normalized input\r\n\tfor(let i = 0; i<array.length; i++){\r\n\r\n\t\t\r\n\t\tarray[i] = thirteen(array[i]);\r\n\r\n\t\tif(array[i]==13){array[array.length] = 0;}//ace is both low and high\r\n\t\t\r\n\t\t\r\n\t}\r\n//console.log(\"debug: array =\" + array);\r\n\t\r\n\tlet highestToLowest = [];\r\n//console.log(\"debug: mathmax array = \" + array.splice(array.indexOf(Math.max(...array)),1));\r\n\t\r\n\thighestToLowest.push(array.splice(array.indexOf(Math.max(...array)),1));\r\n//console.log(highestToLowest[0]);\r\n\twhile(array.length>0&&highestToLowest.length<5){\r\n\t\t\r\n\t\thighestToLowest.push(array.splice(array.indexOf(Math.max(...array)),1));\r\n\r\n\t\t//console.log(highestToLowest[1]);\r\n\t\t\r\n\t\t\r\n\t\tif(highestToLowest[highestToLowest.length-1] != (highestToLowest[highestToLowest.length - 2] -1)){\r\n//console.log(\"debug true\" + Number(highestToLowest[highestToLowest.length-1] + 1 ) + \"\" + highestToLowest[highestToLowest.length - 2]);\r\n\t\t\t\r\n\t\t\tif(highestToLowest[highestToLowest.length-1] == highestToLowest[highestToLowest.length - 2]){ //it's because of a repeat\r\n\t\t\t\t\r\n\t\t\t\thighestToLowest.pop();//deletes repeats instead of resetting array\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\telse { \r\n\t\t\t\t\r\n\r\n\r\n\t\t\t\t\thighestToLowest = [highestToLowest[highestToLowest.length-1]];//reset array\r\n\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\t}\r\n//console.log(\"debug: highestToLowest = \" + highestToLowest);\r\n\tif(highestToLowest.length==5){\r\n//console.log(\"true\");\r\n\t\t\r\n\t\t//return highestToLowest.reduce(((total,value)=>{total += kickerCalculator(value)}),0) + 3500; //gives nan for some reason\r\n\t\tlet weightedPayload = 0;\r\n\tfor (let i = 0; i<highestToLowest.length; i++){\r\n\t\tweightedPayload += kickerCalculator(highestToLowest[i]);\r\n}\r\n\treturn weightedPayload + 3500;\r\n\r\n\t}\r\n\telse return false;\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n\t\r\n}\r\n//1. check for royal flush\r\n//2. check for flush\r\n//3. check for straight\r\n// returns Ms + top card % 13\r\n\r\n//4. check for pair/trip/quads\r\n\r\n//returns Mp,Mt,Mq + top 3, 2, 1\r\n\r\n//pairfinder\r\n\r\nfunction newPairFinder (ray) {\r\n\r\n\tlet array = ray.map(val => thirteen(val)).sort();\r\n\r\n\tlet count = 0;\r\n\tfor(let i = array.length-1; i>0; i--){\r\n\t\tif(array[i]===array[i-1]){\r\n\t\t\tcount++;\r\n\r\n\t\t} else if(count>0){\r\n\r\n\t\t\tswitch(count) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn array[i]+2000;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn array[i]+3000;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn array[i]+6000;\r\n\t\t\t\tdefault: return false;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n\r\n\t//pairevaluator is expecting an unordered list of pairs\r\n\t//we can just greedily return the first found pair\r\n\r\n\r\n}\r\n\r\nfunction pairFinder (ray) {\r\n\t\r\n\tlet array = [...ray]; //we mutate this\r\n\t\r\n\tfor (let i = 0; i<array.length;i++){\r\n\t\t\r\n\t\tfor(let j = i +1; j<array.length; j++){\r\n\t\t\t\r\n\t\t\tif(thirteen(array[i]) == thirteen(array[j])){\r\n\t\t\t\t\r\n\t\t\t\treturn ((()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(j; j<array.length; j++){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(thirteen(array[i])==thirteen(array[j])){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn ((()=>{for(j;j<array.length;j++){if(thirteen(array[i])==thirteen(array[j])){\r\n\t\t\t\t\t\t\t\t//only higher quads beat\r\n\t\t\t\t\t\t\t\treturn thirteen(array[i]) + 6000 /*kickerCalculator(Math.max(array.filter((num)=>{thirteen(num)!=thirteen(array[i])})))*/;//quads\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} return false;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t})() || thirteen(array[i]) + 3000) //trips\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;//no trips\r\n\t\t\t\t\t\r\n\t\t\t\t\t})() || thirteen(array[i]) + 2000)//will either return the number of the pair or false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n//second step is to filter the remaining cards, then run pairFinder on them again, until no cards remain or it returns less than a pair.\r\n\r\nfunction pairEvaluator (ray) {\r\n\t\r\n\tlet scores = [];\r\n\tlet array = [...ray];\r\n\t\r\n\t\r\n\tscores[0] = newPairFinder(array) || 0;\r\n\t\r\n\tif(scores[0]>0){ //pairfinder returned a pair\r\n\t\t\r\n\t\tarray = array.filter((num)=>{return thirteen(num)!=scores[0]%1000});\r\n\t\t\r\n\t\t\tscores[1] = newPairFinder(array) || 0;\r\n\t\t\tif(scores[1]>0){\r\n\t\t\t\t\tarray = array.filter(num=>thirteen(num)!=scores[1]%1000);\r\n\t\t\t\t\tscores[2] = newPairFinder(array) || 0;\r\n\t\t\t}//there's only 3 possible pairs in any set of 7 cards, 2 = 3\r\n\t}\r\n\telse return false;\r\n\t\r\n\tlet max = Math.max(...scores);\r\n\t\r\n\tif(max>6000) {\r\n\t\tconsole.log(\"over 6k\");\r\n\t\treturn max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator(Math.max(...ray.filter(val=>thirteen(val!=thirteen(max%1000))).map(val=>thirteen(val))));//probably quads\r\n\t\t//return max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator(Math.max(array.filter((num)=>{return thirteen(num)!=thirteen(max%6000)})));\r\n\t}\r\n\telse if(max>3000){\r\n\t\t\r\n\r\n\t\tscores = scores.filter((num)=>{return num!=max});\r\n\t\treturn ((Math.max(...scores)>0) ? max - max%1000 + kickerCalculator((max%1000)+13) + Math.max(...scores) - Math.max(...scores)%1000 + kickerCalculator((Math.max(...scores)%1000)+13) \r\n\t\t: max - max%1000 + kickerCalculator((max%1000)+13)+ (()=>{\r\n\t\t\tarray = [...ray].filter((num)=>{return thirteen(num)!=max%1000});\r\n\t\t\tlet bigTwo = 0;\r\n\t\t\tfor(let i = 0; i<2; i++){\r\n\t\t\t\tbigTwo += kickerCalculator(Math.max(...array));\r\n\t\t\t\tarray = array.filter(val=>val!=Math.max(...array));\r\n\t\t\t}\r\n\t\t\treturn bigTwo;\r\n\t\t\t})())//creates a + 5000 hand with highest pair or adds the top 2 kickers\r\n\t\t\r\n\t}\r\n\telse if(max>2000){\r\n\t\tscores = scores.filter((num)=>{return num!=max});\t\r\n\t\treturn ((Math.max(...scores)>0) ? max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator((Math.max(...scores)%1000)+13) + Math.max(...scores) - 1500 - Math.max(...scores)%1000\r\n\t\t: max -max%1000 + kickerCalculator((max%1000)+13) + (()=>{\r\n\t\t\tarray = [...ray].filter((num)=>{return thirteen(num)!=max%1000});\r\n\t\t\t\tlet bigThree = 0;\r\n\t\t\t\tfor(let i = 0; i<3; i++){\r\n\t\t\t\t\tbigThree += kickerCalculator(Math.max(...array));\r\n\t\t\t\t\tarray = array.filter(num => thirteen(num) != thirteen(Math.max(...array)));\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\treturn bigThree;\r\n\t\t\t})())//2p evaluates to 2500 + remainder or + 3 kickers\r\n\t\r\n\t}\r\n\t\r\n\telse {\r\n\t\tconsole.log(\"error no pair but still got here\");\r\n\t\treturn false}\r\n\t\r\n\t\r\n}\r\n//needs a raw kicker\r\nfunction kickerCalculator (kicker) {\r\n//for math reasons, powers of 7 are enough to ensure top kicker wins over summed lower cards\r\n\treturn ((thirteen(kicker))*Math.pow(7,thirteen(kicker)/3))/3000000;\r\n\t\r\n\t\r\n\t\r\n\t}\r\n\t//fixes 13%13 = 0 problem\r\nfunction thirteen (number) {\r\n\tif (number == 0) return 0;\r\n\r\n\tif (number % 13 == 0 ) return 13;\r\n\telse return number%13;\r\n\t\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n//5. return sum of top 5 cards\r\n\r\n//this simple method loops twice to remove two lowest cards and returns the sum of the remaining card values\r\n\r\n\r\nfunction highCard (input){\r\n\r\n\tlet array = [...input];\r\n\r\n{\r\n/*\r\nfor(let i = array.length-1; i>0; i--){\r\n\r\n\r\nif(array[i]<array[i-1]){\r\n\r\n[array[i]][array[i-1]] = [array[i-1]][array[i]];\r\n}\r\n\r\n}\r\n\r\narray.shift(); //removes the lowest*/\r\n/*\r\nwhile(array.length>5){\r\n\tlet minIndex = array.indexOf(Math.min(...array));\r\n\t\r\n\tif(array[0]!=array[minIndex]){\r\n\t\t//swap\r\n\t\t[array[0]][array[minIndex]] = [array[minIndex]][array[0]];\r\n\t}\r\n\telse array.shift();\r\n\t\r\n\t\r\n}*/ \r\n\r\n}\r\n\tarray = array.map(val=>thirteen(val)).sort();\r\n\tarray.shift(); array.shift();\r\n\r\n\r\n\r\n\r\n//scope for j\r\n\t{let j = 0;\r\n\t\tlet summer = (array) => {\r\n\r\n\t\t\tfor(let i = 0; i<array.length;i++){\r\n\t\t\t\r\n\t\t\t\tj += kickerCalculator(array[i]); \r\n\t\t\t}\r\n\t\t\treturn j;\r\n\t\t}\r\n\t\t\treturn summer(array);\r\n\r\n\t\t}\r\n\t}\r\n\r\n//all the work we did above lets us easily compare by hand value\r\n//every function always returns the highest possible hand by that method\r\nexport function handEvaluator (array){\r\n\t\r\n\tlet hand = [];\r\n\thand[hand.length] = flushFinder(array)||0;\r\n\thand[hand.length] = straightFinder(array)||0;\r\n\thand[hand.length] = pairEvaluator(array)||0;\r\n\thand[hand.length] = highCard(array)||0;\r\n\t//console.log(array);\r\n\t//console.log(Math.max(...hand));\r\n\treturn Math.max(...hand);\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n//console.log(\"Kicker finds: \" + kickerCalculator(6));\r\nconst thisarray = [35,51,32,48,28,14,40];//console.log(\"Highcard = \" + highCard(thisarray));\r\n//35,51,32,48,28,14,40 second hand [6,19,32,48,28,14,40]\r\nconsole.log(\"handevaluator: \" + handEvaluator(thisarray)); //no longer throwing errors\r\n//console.log(kickerCalculator(thisarray)); //this needs a single int input...\r\n//console.log(pairFinder(thisarray));\r\nconsole.log(pairEvaluator(thisarray));\r\nconsole.log(\"newpairfainder\" + newPairFinder(thisarray));\r\n//console.log(flushFinder(thisarray));//basically works\r\n//console.log(straightFinder(thisarray)); //fixed\r\n\r\n","C:\\Users\\Owner\\Desktop\\poker calculator\\poker-calculator\\src\\components\\PokerView.js",["47","48"],"C:\\Users\\Owner\\Desktop\\poker calculator\\poker-calculator\\src\\App.js",["49"],"import logo from './logo.svg';\nimport './App.css';\nimport PokerView from './components/PokerView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    \n    <PokerView />\n\n  );\n}\n\nexport default App;\n",["50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":110,"column":14,"nodeType":"58","messageId":"59","endLine":110,"endColumn":16},{"ruleId":"56","severity":1,"message":"60","line":128,"column":48,"nodeType":"58","messageId":"59","endLine":128,"endColumn":50},{"ruleId":"56","severity":1,"message":"57","line":131,"column":49,"nodeType":"58","messageId":"59","endLine":131,"endColumn":51},{"ruleId":"56","severity":1,"message":"57","line":148,"column":27,"nodeType":"58","messageId":"59","endLine":148,"endColumn":29},{"ruleId":"61","severity":1,"message":"62","line":214,"column":10,"nodeType":"63","messageId":"64","endLine":214,"endColumn":20},{"ruleId":"56","severity":1,"message":"57","line":222,"column":26,"nodeType":"58","messageId":"59","endLine":222,"endColumn":28},{"ruleId":"56","severity":1,"message":"57","line":228,"column":28,"nodeType":"58","messageId":"59","endLine":228,"endColumn":30},{"ruleId":"65","severity":1,"message":"66","line":230,"column":17,"nodeType":"67","messageId":"68","endLine":236,"endColumn":7},{"ruleId":"56","severity":1,"message":"57","line":230,"column":69,"nodeType":"58","messageId":"59","endLine":230,"endColumn":71},{"ruleId":"56","severity":1,"message":"60","line":261,"column":52,"nodeType":"58","messageId":"59","endLine":261,"endColumn":54},{"ruleId":"56","severity":1,"message":"60","line":265,"column":45,"nodeType":"58","messageId":"59","endLine":265,"endColumn":47},{"ruleId":"56","severity":1,"message":"60","line":275,"column":118,"nodeType":"58","messageId":"59","endLine":275,"endColumn":120},{"ruleId":"56","severity":1,"message":"60","line":281,"column":44,"nodeType":"58","messageId":"59","endLine":281,"endColumn":46},{"ruleId":"56","severity":1,"message":"60","line":284,"column":56,"nodeType":"58","messageId":"59","endLine":284,"endColumn":58},{"ruleId":"65","severity":1,"message":"69","line":288,"column":26,"nodeType":"67","messageId":"68","endLine":288,"endColumn":54},{"ruleId":"56","severity":1,"message":"60","line":288,"column":34,"nodeType":"58","messageId":"59","endLine":288,"endColumn":36},{"ruleId":"56","severity":1,"message":"60","line":295,"column":44,"nodeType":"58","messageId":"59","endLine":295,"endColumn":46},{"ruleId":"56","severity":1,"message":"60","line":298,"column":56,"nodeType":"58","messageId":"59","endLine":298,"endColumn":58},{"ruleId":"65","severity":1,"message":"69","line":302,"column":27,"nodeType":"67","messageId":"68","endLine":302,"endColumn":79},{"ruleId":"56","severity":1,"message":"60","line":302,"column":48,"nodeType":"58","messageId":"59","endLine":302,"endColumn":50},{"ruleId":"56","severity":1,"message":"57","line":326,"column":13,"nodeType":"58","messageId":"59","endLine":326,"endColumn":15},{"ruleId":"56","severity":1,"message":"57","line":328,"column":18,"nodeType":"58","messageId":"59","endLine":328,"endColumn":20},{"ruleId":"70","severity":1,"message":"71","line":346,"column":1,"nodeType":"72","messageId":"73","endLine":372,"endColumn":2},{"ruleId":"61","severity":1,"message":"74","line":3,"column":9,"nodeType":"63","messageId":"64","endLine":3,"endColumn":28},{"ruleId":"61","severity":1,"message":"75","line":3,"column":53,"nodeType":"63","messageId":"64","endLine":3,"endColumn":59},{"ruleId":"61","severity":1,"message":"76","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":12},{"ruleId":"52","replacedBy":"77"},{"ruleId":"54","replacedBy":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'pairFinder' is defined but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'j', 'j', 'j', 'j'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'array'.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'UncontrolledTooltip' is defined but never used.","'Figure' is defined but never used.","'logo' is defined but never used.",["79"],["80"],"no-global-assign","no-unsafe-negation"]